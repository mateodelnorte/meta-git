#!/usr/bin/env node

const exec = require('meta-exec');
const fs = require('fs');
const debug = require('debug')('meta-git-clone');
const getMetaFile = require('get-meta-file');
const path = require('path');
const program = require('commander');
const util = require('util');

if (!process.argv[2] || process.argv[2] === '--help')
  return console.log(`\n  usage:\n\n    meta git clone <metaRepoUrl>\n`);

const repoUrlUnescaped = process.argv[2] === 'blank' ? process.argv[3] : process.argv[2];
const repoUrl = repoUrlUnescaped.replace(/[;|]/gi, ''); // Escape potential harmful characters to fix a Command Execution

const dirname = path.basename(repoUrl).replace('.git', '');

console.log(`meta git cloning into \'${repoUrl}\' at ${dirname}`);

exec({ cmd: `git clone ${repoUrl} ${dirname}`, displayDir: dirname }, (err, result) => {
  if (err) throw err;

  const newDir = path.resolve(dirname);

  debug(`chdir to ${newDir}`);

  process.chdir(newDir);

  const meta = getMetaFile();

  const projects = recursiveSearch(meta.projects);

  let project = null;

  function child(err) {
    if (err) throw err;

    if (!projects.length) return 0;

    project = projects.pop();

    exec(
        {
          cmd: `git clone ${project.git} ${project.folder}`,
          displayDir: path.join(newDir, project.folder),
        },
        err => {
          if (err) throw err;

          child();
        }
    );
  }

  child();
});

const recursiveSearch = (obj, results = []) => {
  const r = results;
  Object.keys(obj).forEach(key => {
    const value = obj[key];
    if (typeof value !== 'object') {
      r.push({folder: key, git: value});
    } else if (typeof value === 'object') {
      recursiveSearch(value, r);
    }
  });
  return r;
};
